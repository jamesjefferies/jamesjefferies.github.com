<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | James Jefferies and ShedCode Ltd]]></title>
  <link href="http://jamesjefferies.com/categories/java/atom.xml" rel="self"/>
  <link href="http://jamesjefferies.com/"/>
  <updated>2013-01-18T12:25:56+00:00</updated>
  <id>http://jamesjefferies.com/</id>
  <author>
    <name><![CDATA[James Jefferies]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Poor old java]]></title>
    <link href="http://jamesjefferies.com/2012/09/04/poor-old-java/"/>
    <updated>2012-09-04T12:11:00+01:00</updated>
    <id>http://jamesjefferies.com/2012/09/04/poor-old-java</id>
    <content type="html"><![CDATA[<p>There seems to be a lot of noise at the moment about the latest security vulnerabilities in Java, especially Java 7. I'd go as far as to say that some of the articles are <a href="http://www.pcadvisor.co.uk/news/security/3379150/time-give-java-boot/">scare stories</a>. Is this what we need, to give Java the boot?</p>

<h2>TL;DR</h2>

<p>All computers connected to things have security vulnerabilities of various forms.</p>

<p>Desktop Java installed computers where not required is an unnecessary security risk and should be uninstalled, just as Adobe Flash, Adobe Reader, Silverlight etc. Windows 8 and Mac OS X don't bundle Java runtimes via default anymore. This is a good thing. Oracle should be far quicker out of the blocks fixing security vulnerabilitles.</p>

<p>Giving Java the boot full stop is an over the top reaction. However, giving Java the boot on the desktop when it's not required is a wise move.</p>

<h2>History</h2>

<p>Java as a platform has a reputation for being secure, reliable and frequently patched. Being able to run Java server side on Sun software provided the building blocks for many web businesses at the end of the last millenium and in to this one.</p>

<p>It also has many branches in to other parts of the internet ecosystem. As well as running server side, the other two main areas are mobile Java, J2ME, for example and desktop Java, either via browser plugin Applets or as runnable GUI applications using a desktop JVM (virtual machine).</p>

<p>Over the last few years, mobile Java has basically been nobbled by the rise of smartphones and their respective application frameworks and stacks, Android, iOS, Windows whatever it's called, BlackBerry and the rest.</p>

<p>However, the legacy of desktop Java has continued by some applications still requiring a JVM installed on the local PC and some people still writing or using Java applets. Althoguh Sun and now Oracle have continued to try and encourage desktop development with their JavaFX initative, they've not got very far.</p>

<h3>Applets</h3>

<p>The idea behind applets was that you visited a site via a web browser, which could always deliver the latest version of the application code to your browser, either to run in a plug-in or using the JVM installed on your machine. They were useful for some niche applications, you sometimes see them now replacing flash file uploaders for example, but the User Experience was often a bit shonky.</p>

<h3>Desktop Applications</h3>

<p>Write Once, run anywhere was the mantra behind Java Desktop applications, an attractive proposition. One set of code would run on Windows, Linux, Unix variants &amp; Macs. Many Java development environments have been written in Java and are used today. CrashPlan is an example cross platform application which requires desktop Java to work.</p>

<h2>Legacy</h2>

<p>Unfortunately, a lot of the Java runtimes (and Flash installs, adobe reader installs etc), installed in days of yore on people's machines will have security vulnerabilities, either because they are out of date or because of recent new exploits.</p>

<p>It was interesting to see Apple's response to recent JVM exploits, although they may have been slow in responding, they, in effect, switched off people's Java installations, providing a prompt if it was required. In one OS X update (assuming it was installed!) Macs became better protected from Java exploits.</p>

<h2>Summary</h2>

<p>If you don't use Java on your machine - uninstall it, it's not worth having a potential vulnerability. Same with Flash or Adobe reader - if you don't use them, uninstall them.</p>

<p>If you do need it installed on your machine, there is some great advice <a href="http://www.macworld.co.uk/macsoftware/news/?newsid=3378690&amp;pagtype=allchandate">here</a></p>

<p>Of course, keep things up to date that you do use, Operating systems, browsers etc</p>

<p>Java server side is a different story. If you do use the Java Virtual Machine, whether it is for Java apps, Clojure, Scala or whatever. Keep your eyes on the Oracle security bulletins, update when you can and be aware of any vulnerabilities in the latest version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whatever next - the technical stuff]]></title>
    <link href="http://jamesjefferies.com/2012/06/15/whatever-next-the-technical-stuff/"/>
    <updated>2012-06-15T12:51:02+01:00</updated>
    <id>http://jamesjefferies.com/2012/06/15/whatever-next-the-technical-stuff</id>
    <content type="html"><![CDATA[<p>In recent years my main programming language has been Java, sprinkled with a bit of the usual korn/zsh scrips, SQL, HTML, JavaScript and other gubbins. The world of Java is rich with libraries, web frameworks, platforms and alternate languages. I've invested a lot of time in this ecosystem, knowing which tools are useful for which problems, gained expertise in various web frameworks, development environments and platforms, generally to be as productive as I've ever been.</p>

<p>For the last couple of years though, I've been pondering whether to stick with what I know, or to spend time learning some new stuff. It is fair to say that I'm not a natural polyglot. I like to spend decent time getting to know a language and it's ecosystem and I find it can be tricky switching.</p>

<h3>Grails &amp; Groovy</h3>

<p>At first I spent a bit of time, starting to get to know <a href="http://grails.org">Grails</a>, basically using <a href="http://groovy.codehaus.org/">Groovy</a> on the JVM (Java Virtual Machine) to build a Rails like web framework. The rest of the Grails stack is also stuff which I know very well, Spring, Hibernate etc. There is a lot I like about Grails and I've yet to investigate all this is new in the latest 2.0 release.</p>

<p>So, there you go, something I'd like, building upon a lot which I already know. Should be the favourite right?</p>

<h3>Scala &amp; Play/Lift</h3>

<p>Well, I then started thinking a bit about <a href="http://www.scala-lang.org/">Scala</a>, a language which polarises opinion, especially amongst the Java community. It is either the 'new' Java or it is a hodge podge of static typed semi functional programming. People complain about it's complexity or love how doing things in a more functional fashion reduces code and maintenance and gets it all set up for multi-core CPUs. If I was planning on doing more 'corporate' work, working on huge projects in London or building a twitter competitor then it'd make sense for me to have a good look at Scala.</p>

<p>But I'm not, maybe ShedCode will work on an idea which will one day be huge, I think I'll worry about that another time!</p>

<h3>Clojure</h3>

<p>I'd also like to learn <a href="http://clojure.org/">Clojure</a>, mainly because I think it will be good for my programming skills and good for my brain.</p>

<h3>Rails &amp; Ruby</h3>

<p>Then, working on <a href="http://happenstanceproject.com">Happenstance</a> has made me think again...</p>

<p>In early 2008 I was going to investigate <a href="http://rubyonrails.org/">Rails</a> &amp; Ruby, one because I liked the fact it was called Rails, but then also because it seemed to be gaining a lot of momentum and interest and it was 'cool'. In the end I got a job doing java, so I put it on the back burner. I also started to realise that, as is often the case where things are a bit 'cool' there were quite a few.. ahem.. nobbers around who not only believed that Rails was THE framework to use but that using anything else was such a POOR substitute. I have to be honest, it did my nut. I did meet a few people who seemed ok, but the majority, I didn't really get on with.</p>

<p>Now I find that a lot of the R&amp;D web apps I'm interested in, have been built with Rails. I've also met some more Rails devs who are not nobbers, in fact, they are interesting, helpful, open minded people. I'd like to work with some of them, I'd like to build things on top of the work they've done. I'd like to explore the Rails ecosystem which has inspired so much in other languages (like Grails for example).</p>

<h3>Client Side</h3>

<p>Even though over the last few weeks, I've been thinking more about whether the classic server side MVC web framework is what I should be looking at all. There is a significant trend for using client side JavaScript frameworks for doing a lot of the hardwork in the browser, whilst having a more simple RESTful service/API set up on the server. Examples would be <a href="http://documentcloud.github.com/backbone/">Backbone.js</a>, <a href="http://emberjs.com/">Ember.js</a>, <a href="http://knockoutjs.com/">Knockout.js</a> etc. This somehow feels like a good idea, but I'm not great with JavaScript and I'm not sure this is what I want to do just yet. Obviously improving my JavaScript knowledge would be useful regardless!</p>

<h3>Crossroads</h3>

<p>So, I find myself at a crossroads. I'll spend some time with Clojure, regardless of what else I do, but I've got some interesting projects to start in the next month or so and I need to decide whether I:</p>

<ol>
<li><p>Learn Rails and see what happens...</p></li>
<li><p>Go with what I know a bit and build something with Grails. I know the tools, I know the libraries and I know it works (mainly)</p></li>
<li><p>Client side JavaScript stuff</p></li>
<li><p>Go with Scala, build on top of the Java I know and become have decent with functional languages</p></li>
</ol>


<p>At the moment, these are in my preferred order, but I'll let you know what happens...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Eclipse under the Unity interface]]></title>
    <link href="http://jamesjefferies.com/2011/09/09/running-eclipse-under-the-unity-interface/"/>
    <updated>2011-09-09T10:00:36+01:00</updated>
    <id>http://jamesjefferies.com/2011/09/09/running-eclipse-under-the-unity-interface</id>
    <content type="html"><![CDATA[<p>Unity eh? Love it or hate it the version in Ubuntu 11.04 seems not quite complete. Also other applications sometimes will not play nicely.</p>

<p>Eclipse is one of them, your menu items can go walk about. I found this <a href="http://blog.matto1990.com/2011/04/using-eclipse-under-ubuntu-11-04-natty/">blog post</a> which has a helpful hint. Unsetting UBUNTU_MENUPROXY for the application does the trick</p>

<pre><code>#!/bin/bash
unset UBUNTU_MENUPROXY
path/to/eclipse/here
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disabling liquibase when running unit tests]]></title>
    <link href="http://jamesjefferies.com/2011/08/25/disabling-liquibase-when-running-unit-tests/"/>
    <updated>2011-08-25T10:33:44+01:00</updated>
    <id>http://jamesjefferies.com/2011/08/25/disabling-liquibase-when-running-unit-tests</id>
    <content type="html"><![CDATA[<p>If you're running Liquibase, configured by Spring (or whatever) and you don't want it to run it's checks when running unit tests, you can disable it from running by setting a system property.</p>

<p>Whilst running a single unit test class many times, you might want to add a system set property call before any of the tests are run. Hence:</p>

<p>``` java  <br/>
@BeforeClass
public static void switchOffLiquibase() {</p>

<pre><code>System.setProperty(Liquibase.SHOULD_RUN_SYSTEM_PROPERTY, "false");
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Scala Momentum builds...]]></title>
    <link href="http://jamesjefferies.com/2011/04/06/the-scala-momentum-builds/"/>
    <updated>2011-04-06T13:01:22+01:00</updated>
    <id>http://jamesjefferies.com/2011/04/06/the-scala-momentum-builds</id>
    <content type="html"><![CDATA[<p>Scala is a relatively new programming language, which runs on the Java Virtual Machine and has very good interoperability with the Java Language.</p>

<p>Here is the blurb from <a href="http://www.scala-lang.org/">the official site</a></p>

<p>"Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way. It smoothly integrates features of object-oriented and functional languages, enabling Java and other programmers to be more productive. Code sizes are typically reduced by a factor of two to three when compared to an equivalent Java application."</p>

<p>The bit which gets managers excited is the bit where it says "more productive", the bit which gets technical architects excited is the bit where it says "smoothly integrates" and the bits which get developers excited is all of it!</p>

<p>Some people see Scala being the natural successor to Java, indeed some of our developers have spent a little bit of time having a look at the language and the main web framework, <a href="http://liftweb.net/">Lift</a>. <a href="http://seventhings.liftweb.net/">This sells lift pretty well</a>.</p>

<p>So, why post about it - well, as well as Scala being something we should be looking at, I spotted a <a href="http://www.infoq.com/articles/guardian_scala">great blog post</a> talking about how the Guardian newspaper have started using Scala. Once they started, they couldn't stop! I like this bit:</p>

<p>"After about four weeks of writing just the tests in Scala, we got fed up of having to write the main code in Java, and decided to convert the whole lot to Scala."</p>

<p>and this bit was a real eye opener:</p>

<p>"The core Java platform that delivers <a href="http://www.guardian.co.uk">www.guardian.co.uk</a> has a full release every two weeks. Compared with many enterprise Java applications, this is excellent. Compared with other websites, it's very poor."</p>

<p>Food for thought people, food for thought...</p>
]]></content>
  </entry>
  
</feed>
