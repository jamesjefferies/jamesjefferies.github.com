<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Techie | James Jefferies and ShedCode Ltd]]></title>
  <link href="http://jamesjefferies.com//categories/techie/atom.xml" rel="self"/>
  <link href="http://jamesjefferies.com/"/>
  <updated>2012-08-07T15:24:42+01:00</updated>
  <id>http://jamesjefferies.com/</id>
  <author>
    <name><![CDATA[James Jefferies]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Importing Network Rail Train Movement feeds into MongoDB]]></title>
    <link href="http://jamesjefferies.com/2012/08/07/importing-network-rail-train-movement-feeds-into-mongodb/"/>
    <updated>2012-08-07T14:33:00+01:00</updated>
    <id>http://jamesjefferies.com/2012/08/07/importing-network-rail-train-movement-feeds-into-mongodb</id>
    <content type="html"><![CDATA[<h2>Network Rail datafeeds?</h2>

<p>Ah yes, please my previous <a href="http://jamesjefferies.com/2012/07/04/getting-started-with-network-rails-datafeeds/">blog</a> post for further info, apologies for the lack of updates on here, I've been away, sent round the loop line.</p>

<h2>Why MongoDB?</h2>

<p><a href="http://www.mongodb.org/">MongoDB</a> is a scalable, high-performance, open source, NoSQL database. I thought it would make a good fit for the train movement feeds as it's storage is oriented towards JSON-style documents. It's JSON-style because it actually uses <a href="http://bsonspec.org/">binary-encoded serialisation</a> behind the scenes.</p>

<p>There is a nice little interactive tutorial on the MongoDB home page to get you in to the swing of things.</p>

<h2>Getting Mongo installed on OS X</h2>

<p>I use <a href="http://mxcl.github.com/homebrew/">Homebrew</a> for installing packaged stuff on to my Mac, if you use it, then you can easily install it with</p>

<p><code>
brew install mongodb
</code></p>

<h2>What do you need for Ruby Mongo Magic?</h2>

<p>There is a standard Mongo driver available, which you can install using gem
<code>
gem install mongo
</code>
but it is also worth installing the C compiled extension to speed up any BSON serialisation
<code>
gem install bson_ext
</code></p>

<p>More info can be found on the <a href="http://www.mongodb.org/display/DOCS/Ruby+Language+Center">official pages</a></p>

<h2>Code example?</h2>

<p>Here you go, proper version in the <a href="https://github.com/jamesjefferies/national-rail-datafeeds-ruby-examples">github repository</a></p>

<p><div><script src='https://gist.github.com/3285558.js?file='></script>
<noscript><pre><code>require 'rubygems' 
require 'stomp'
require 'json'
require 'mongo'

begin
  # Credentials set here as environment variables
  @user = ENV[&quot;DATAFEEDS_USER&quot;]; 
  @password = ENV[&quot;DATAFEEDS_PASSWORD&quot;]
  @host = &quot;datafeeds.networkrail.co.uk&quot;
  @port = 61618

  # Example destination add yours here
  @destination = &quot;/topic/TRAIN_MVT_ALL_TOC&quot;

  puts &quot;Connecting to datafeeds as #{@user} using stomp protocol stomp://#{@host}:#{@port}\n&quot; 
  @connection = Stomp::Connection.open @user, @password, @host, @port, true 
  @connection.subscribe @destination 

  while true
    @msg = @connection.receive

    # Use JSON library to parse the messge body
    message_body = JSON.parse(@msg.body)

    db = Mongo::Connection.new.db(&quot;rail&quot;)
    coll = db.collection(&quot;td&quot;)

    message_body.each do |td| 

      # Sanity check debug, output each td message as nice looking JSON 
      # puts JSON.pretty_generate(td)   
      
      # insert into collection
      id = coll.insert(td)

    end
  end 

  @connection.disconnect
rescue 
end</code></pre></noscript></div>
</p>

<h2>Examples of querying Mongo</h2>

<p>There are lots of good examples and resources for using Mongo, but just a couple of examples related to the schema I've used in the example. You can fire up the interactive Mongo console and try the following (once you have some data!)</p>

<p>To retrieve all Departure events</p>

<p><code>
db.td.find({ "body.event_type" : "DEPARTURE" })
</code></p>

<p>To retrieve 10 (using limit) Train Movement (type 3) messages</p>

<p><code>
db.td.find({ "header.msg_type" : "0003" }).limit(10)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from WordPress to Octopress]]></title>
    <link href="http://jamesjefferies.com/2012/08/01/moving-from-wordpress-to-octopress/"/>
    <updated>2012-08-01T12:43:00+01:00</updated>
    <id>http://jamesjefferies.com/2012/08/01/moving-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<h2>What is Octopress?</h2>

<p><a href="http://octopress.org">Octopress</a> is a blogging engine designed to be run from the command line, it uses Markdown for formatting content and doesn't have any built in GUI editing facilities.</p>

<p>It is worth looking at though because it generates static HTML files, so you don't need a database, you don't need PHP you just need to serve straight forward files.</p>

<p>The integration with github pages is very nice, so you can actually use github to host your blog or website leaving them to worry about server admin etc!</p>

<h2>Why did I switch?</h2>

<p>At the moment, my virtual server was only hosting my blog and nothing else. At the moment, I don't need it for anything else, so being able to move to github pages for free was one draw, saving me Â£X a month. When I need a server again, I'll set one up.</p>

<p>I having nothing against WordPress per se, but it wasn't very hackable by me, a non-PHP developer. Now with Octopress, it seems a lot more straight forward. Plus I no longer have a MySQL or PHP install to maintain.</p>

<p>It <em>feels</em> like the Octopress templates are more designer friendly. I'll let you know if that is the case!</p>

<p>My site now has very straightforward version control, powered by git.</p>

<h2>How does it work?</h2>

<p>You check out the <a href="https://github.com/imathis/octopress">source</a> (from github of course). The html generating engine is written in ruby, so you need to have that installed. Once set up and configured, you can push your content using git to wherever you want to deploy it.</p>

<p>When you deploy, octopress turns your markdown and HTML templates in to straight forward HTML pages ready to be served.</p>

<p>It uses Disqus by default for comments, but if you have a WordPress account, you can set that up with Disqus before migration. Works a treat.</p>

<h2>Exiting WordPress</h2>

<p>At first I tried the ruby WordPress migrating script. Basically it was not very good and I think I wasted a fair bit of time on it. Better is the Python <a href="https://github.com/thomasf/exitwp">exitwp.py</a> script which is.. brilliant!</p>

<h2>Downsides</h2>

<ul>
<li>There is a much smaller plugin selection available</li>
<li>You generally re-generate the whole site when you want to publish something new (there are ways around that though, to selectively generate new content).</li>
<li>If you had a blog with a lot of posts, then it might take some time to generate.</li>
<li>Small amount of off-the-shelf themes</li>
</ul>


<h2>Upsides</h2>

<ul>
<li>The standard plugins you might want are available, twitter, github, google analytics.</li>
<li>Github pages integration is very straightforward</li>
<li>Simple caching can be set up if required, but no more W3 Total Cache Super Plugin things</li>
<li>No WordPress security loopholes and patches</li>
<li>No PHP or MySQL loopholes or patches</li>
<li>Fast</li>
<li>Relatively lightweight page sizes</li>
<li>Nice default, responsive design</li>
</ul>


<h2>Theme</h2>

<p>I'm using a slightly customised default theme at the moment, but hopefully will have a bespoke one up and running soon.</p>

<h2>Summary</h2>

<p>Now I'm migrated, I'm liking it so far, let me know what you think..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Downloading the Network Rail Schedules]]></title>
    <link href="http://jamesjefferies.com/2012/07/18/downloading-the-network-rail-schedules/"/>
    <updated>2012-07-18T17:43:39+01:00</updated>
    <id>http://jamesjefferies.com/2012/07/18/downloading-the-network-rail-schedules</id>
    <content type="html"><![CDATA[<p>As well as the live feeds which you can subscribe to for the Network Rail data, you can also download the Schedule feed which is delivered by Amazon S3. The Schedule feed is an extract of train schedules from the Integration Train Planning System.</p>

<p>When you have your Network Rail account you can subscribe, either to all the data, or to the Train Operators you are interested in. However, at the time of writing, the only feed which works is the one for ALL the data, the Train Operator specific downloads throw an unhelpful error</p>

<blockquote><p>HTTP Status 401 - User not subscribed to CIF_HL_FULL_DAILY</p></blockquote>

<p>Which is a bit rubbish really. So my advice is, at this point to subscribe to ALL the data rather than just for one TOC. You can then access the feeds and download the zip file with either:</p>

<p><a href="https://datafeeds.networkrail.co.uk/ntrod/CifFileAuthenticate?type=CIF_ALL_FULL_DAILY&amp;day=toc-full">https://datafeeds.networkrail.co.uk/ntrod/CifFileAuthenticate?type=CIF_ALL_FULL_DAILY&amp;day=toc-full</a></p>

<p>for the full feed or, say</p>

<p><a href="https://datafeeds.networkrail.co.uk/ntrod/CifFileAuthenticate?type=CIF_ALL_UPDATE_DAILY&amp;day=toc-mon">https://datafeeds.networkrail.co.uk/ntrod/CifFileAuthenticate?type=CIF_ALL_UPDATE_DAILY&amp;day=toc-mon</a></p>

<p>for Monday's update.</p>

<p>Note that you will need to authenticate if you haven't already, using your username and password.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Network Rail's datafeeds]]></title>
    <link href="http://jamesjefferies.com/2012/07/04/getting-started-with-network-rails-datafeeds/"/>
    <updated>2012-07-04T23:46:41+01:00</updated>
    <id>http://jamesjefferies.com/2012/07/04/getting-started-with-network-rails-datafeeds</id>
    <content type="html"><![CDATA[<p>I've had a few railway project ideas knocking around for ages now, but have had a couple of blockers which have meant they have not progressed. Mainly lack of time and lack of data! I'm therefore clearing the decks for July and August to spend some decent time working on these ideas, which also co-incides with Network Rail giving access to a new platform providing live data feeds. You may have heard about <a href="http://www.techweekeurope.co.uk/news/network-rail-open-data-feeds-83128">the launch</a>, I believe the platform was developed in conjunction with <a href="http://rockshore.net/">Rockshore</a>, well, it's what this <a href="https://twitter.com/rockshoreltd/status/218323058493108224">tweet</a> says anyway.</p>

<h2>Where do you start?</h2>

<p>If you are interested in using the datafeeds yourself, you can read all about it on <a href="http://www.networkrail.co.uk/data-feeds/">Network Rail's site</a>Â which also has a link to download the developer's guide in PDF format.</p>

<p>First, you need to <a href="https://datafeeds.networkrail.co.uk/ntrod/login">create an account</a>Â - I believe there are limited numbers of accounts going at the moment, so the sooner you do that, the better.</p>

<p>There are two types of feeds available, pub/sub using the stomp protocol for real-ish time data &amp; downloads of huge files from Amazon S3 for timetables etc.</p>

<p>Once your account is active, you can subscribe to any of the pub/sub datafeeds you like and away you go.</p>

<h2>Receiving Messages</h2>

<p>I decided that I was going to try accessing the pub/sub datafeeds using Ruby (not my usual language) and put my experimental code on to my git hub account. Feel free to <a href="https://github.com/jamesjefferies/national-rail-datafeeds-ruby-examples">have a look and check it out</a>, I'll be using it for my initial experiments, so it should get updated beyond this basic example!</p>

<p>I've also included a sample, no error checking, very straightforward listener below. If you wish to try and run it, then you will of course need Ruby and Ruby gems installed, plus the stomp ruby gem.</p>

<p>Then, you just need to ensure your username and password are set as the relevant environment variables and away you go.</p>

<p>All being well, you should slowly receive updates from the topic you have selected. The example below uses Train positioning data for the East Midlands (TD_MC_EM_SIG_AREA) and assumes that you have subscribed to that feed using the <a href="https://datafeeds.networkrail.co.uk/ntrod/myFeeds">network rail control panel</a></p>

<p>The updates you receive from this program are not formatted at all, it's just sending the message straight to string. Of course, this is just helping you know you're set up correctly. So you would get something like:</p>

<p><code>ruby
&lt;Stomp::Message headers={"message-id"=&gt;"ID:blahblah", "destination"=&gt;"/topic/TD_MC_EM_SIG_AREA", "timestamp"=&gt;"1341436026840", "expires"=&gt;"1341436326840", "persistent"=&gt;"true", "priority"=&gt;"4"} body='[{"CA_MSG":{"to":"1234","time":"1341435963000","area_id":"WH","msg_type":"CA","from":"5678","descr":"1Z99"}}]' command='MESSAGE' &gt;
</code></p>

<p>Ultimately of course, you'd process the JSON from the body and do something with it.</p>

<h2>Example Ruby Listener</h2>

<p>``` ruby
require 'rubygems'
require 'stomp'</p>

<p>begin
  # Credentials set here as environment variables
  @user = ENV["DATAFEEDS_USER"];
  @password = ENV["DATAFEEDS_PASSWORD"]
  @host = "datafeeds.networkrail.co.uk"
  @port = 61618</p>

<p>  # Example destination add yours here
  @destination = "/topic/TD_MC_EM_SIG_AREA"</p>

<p>  puts "Connecting to datafeeds as #{@user} using stomp protocol stomp://#{@host}:#{@port}\n"
  @connection = Stomp::Connection.open @user, @password, @host, @port, true
  @connection.subscribe @destination</p>

<p>  while true</p>

<pre><code>@msg = @connection.receive
puts @msg
</code></pre>

<p>  end
  @connection.disconnect
rescue
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whatever next - the technical stuff]]></title>
    <link href="http://jamesjefferies.com/2012/06/15/whatever-next-the-technical-stuff/"/>
    <updated>2012-06-15T12:51:02+01:00</updated>
    <id>http://jamesjefferies.com/2012/06/15/whatever-next-the-technical-stuff</id>
    <content type="html"><![CDATA[<p>In recent years my main programming language has been Java, sprinkled with a bit of the usual korn/zsh scrips, SQL, HTML, JavaScript and other gubbins. The world of Java is rich with libraries, web frameworks, platforms and alternate languages. I've invested a lot of time in this ecosystem, knowing which tools are useful for which problems, gained expertise in various web frameworks, development environments and platforms, generally to be as productive as I've ever been.</p>

<p>For the last couple of years though, I've been pondering whether to stick with what I know, or to spend time learning some new stuff. It is fair to say that I'm not a natural polyglot. I like to spend decent time getting to know a language and it's ecosystem and I find it can be tricky switching.</p>

<h3>Grails &amp; Groovy</h3>

<p>At first I spent a bit of time, starting to get to know <a href="http://grails.org">Grails</a>, basically using <a href="http://groovy.codehaus.org/">Groovy</a> on the JVM (Java Virtual Machine) to build a Rails like web framework. The rest of the Grails stack is also stuff which I know very well, Spring, Hibernate etc. There is a lot I like about Grails and I've yet to investigate all this is new in the latest 2.0 release.</p>

<p>So, there you go, something I'd like, building upon a lot which I already know. Should be the favourite right?</p>

<h3>Scala &amp; Play/Lift</h3>

<p>Well, I then started thinking a bit about <a href="http://www.scala-lang.org/">Scala</a>, a language which polarises opinion, especially amongst the Java community. It is either the 'new' Java or it is a hodge podge of static typed semi functional programming. People complain about it's complexity or love how doing things in a more functional fashion reduces code andÂ maintenanceÂ and gets it all set up for multi-core CPUs. If I was planning on doing more 'corporate' work, working on huge projects in London or building a twitter competitor then it'd make sense for me to have a good look at Scala.</p>

<p>But I'm not, maybe ShedCode will work on an idea which will one day be huge, I think I'll worry about that another time!</p>

<h3>Clojure</h3>

<p>I'd also like to learn <a href="http://clojure.org/">Clojure</a>, mainly because I think it will be good for my programming skills and good for my brain.</p>

<h3>Rails &amp; Ruby</h3>

<p>Then, working on <a href="http://happenstanceproject.com">Happenstance</a> has made me think again...</p>

<p>In early 2008 I was going to investigate <a href="http://rubyonrails.org/">Rails</a> &amp; Ruby, one because I liked the fact it was called Rails, but then also because it seemed to be gaining a lot of momentum and interest and it was 'cool'. In the end I got a job doing java, so I put it on the back burner. I also started to realise that, as is often the case where things are a bit 'cool' there were quite a few.. ahem.. nobbers around who not only believed that Rails was THE framework to use but that using anything else was such a POOR substitute. I have to be honest, it did my nut. I did meet a few people who seemed ok, but the majority, I didn't really get on with.</p>

<p>Now I find that a lot of the R&amp;D web apps I'm interested in, have been built with Rails. I've also met some more Rails devs who are not nobbers, in fact, they are interesting, helpful, open minded people. I'd like to work with some of them, I'd like to build things on top of the work they've done. I'd like to explore the Rails ecosystem which has inspired so much in other languages (like Grails for example).</p>

<h3>Client Side</h3>

<p>Even though over the last few weeks, I've been thinking more about whether the classic server side MVC web framework is what I should be looking at all. There is a significant trend for using client side JavaScript frameworks for doing a lot of the hardwork in the browser, whilst having a more simple RESTful service/API set up on the server. Examples would be <a href="http://documentcloud.github.com/backbone/">Backbone.js</a>, <a href="http://emberjs.com/">Ember.js</a>, <a href="http://knockoutjs.com/">Knockout.js</a> etc. This somehow feels like a good idea, but I'm not great with JavaScript and I'm not sure this is what I want to do just yet. Obviously improving my JavaScript knowledge would be useful regardless!</p>

<h3>Crossroads</h3>

<p>So, I find myself at a crossroads. I'll spend some time with Clojure, regardless of what else I do, but I've got some interesting projects to start in the next month or so and I need to decide whether I:</p>

<ol>
<li><p>Learn Rails and see what happens...</p></li>
<li><p>Go with what I know a bit and build something with Grails. I know the tools, I know the libraries and I know it works (mainly)</p></li>
<li><p>Client side JavaScript stuff</p></li>
<li><p>Go with Scala, build on top of the Java I know and become have decent with functional languages</p></li>
</ol>


<p>At the moment, these are in my preferred order, but I'll let you know what happens...</p>
]]></content>
  </entry>
  
</feed>
